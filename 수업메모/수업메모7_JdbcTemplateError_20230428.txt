=============================
에러 내용 : JdbcTemplate 를 찾을 수 없다.
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No matching bean of type [org.springframework.jdbc.core.JdbcTemplate] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoSuchBeanDefinitionException(DefaultListableBeanFactory.java:924)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:793)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:707)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:478)
	... 14 more


====================================
예외 내용 : vo.getseq(100)
Exception in thread "main" 원인을 모르는 오류
org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [insert into board(seq, title, writer, content) values(?,?,?,?)]; Unique index or primary key violation: "PUBLIC.PRIMARY_KEY_3 ON PUBLIC.BOARD(SEQ) VALUES ( /* 6 */ CAST(100 AS NUMERIC(3)) )"; SQL statement:
insert into board(seq, title, writer, content) values(?,?,?,?) [23505-214]; nested exception is org.h2.jdbc.JdbcSQLIntegrityConstraintViolationException: Unique index or primary key violation: "PUBLIC.PRIMARY_KEY_3 ON PUBLIC.BOARD(SEQ) VALUES ( /* 6 */ CAST(100 AS NUMERIC(3)) )"; SQL statement:
insert into board(seq, title, writer, content) values(?,?,?,?) [23505-214] 


100번 글을 두번 해서 primary violation 이 된다. 
여기에서 트렌젝션 롤백이 되어야 하는데 트렌젝션 롤백이 안되고
100번 글은 등록이 되게 된다. 

--> 트렌젝션 기능 도입
jdbc.datasource.DataSourceTransactionManager (트렌젝션 관리)
spring, 마이바티스, 아이바티스 JDBC jdbc.datasource.DataSourceTransactionManager 사용
doCommit , doRollback

어떤 DB연동 기술/프레임워크를 사용하느냐에 따라 커밋과 롤백의 알고리즘이 다르게 필요하다.

HibernateTransaction
Hibernate 라는 ORM 프레임워크를 사용하면 ORM 에 해당하는 커밋과 롤백의 알고리즘을 사용

-----------------------

AOP를 공부하면서 지금까지 사전처리, 사후처리, 시간체크, 예외처리 등등 Advice 매소드 기능을 만들었다.
Spring에서는 트렌젝션에 관련된 태그들을 제공하고 , 트렌젝션 어드바이스는 xml 설정파일에서  tx 네임스페이스를 추가하면 이를 통해  스프링 컨테이너가 만들어준다 !

트렌젝션 어드바이스에서의 작업은 트렌젝션 어드바이스의 참조용 id와 어떤 트렌젝션 메니저를 사용할지 (bean id 등록을 통해) 설정을 정하기만 하면 된다.

id가 txAdvice 인 트렌젝션메니저에서 tx:method의 name이 * 이니까 모든 메서드에서 예외 (Exception)이 발생하면 롤백할꺼야(rollback-for)


	<!-- Transaction 설정 -->
		<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<property name="dataSource" ref="dataSource"/>
		</bean>
		
		<tx:advice id="txAdvice" transaction-manager="txManager">
			<tx:attributes>
				<tx:method name="*" rollback-for="Exception"/>
			</tx:attributes>
		</tx:advice>
		
		<aop:config>
			<aop:pointcut id="txPointcut" expression="execution(* com.min.biz..*Impl.*(..))" />
			<aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice" />
		</aop:config>



트렌젝션에서만 aop:advisor 에서만 사용한다고 가정 (원래는 어드바이스 클래스를 안만들었을때 aop:advisor 를 쓰지만 트렌젝션 말고 나머지는 어드바이스를 만들기때문에)

포인트컷과 어드바이스를 연결했다 : aop:advisor 
컨테이너야, 모든 비즈니스 메서드에 대해서 tx:advice 의 id 값으로 트렌젝션을 관리해
tx:advice의 id이름 어드바이스는 tx:method 태그의 name 에 적힌 매서드 ( * 아스트로 표시면 모든 메서드) 에서 예외가 발생하면 롤백하는데 (rollback-for="Exception"),
bean에 등록한 id의 txManager 를 이용해서 롤백하거나 문제가 없으면 커밋할꺼야

xml설정파일에서 모든 비즈니스 매서드에 포인트컷을 걸었기 때문에 모든 비즈니스 매서드의 트렌젝션을 신경쓸 필요가 없다.



