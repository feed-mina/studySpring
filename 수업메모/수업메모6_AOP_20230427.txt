AOP (Aspect Oriented Programing)
AOP는 핵심 개념이 바로 관심 분리 (Seperation of Connection)에 있다. 매소드마다 공통으로 등장하는 로깅이나 예외, 트렌젝션 처리 같은 코드들은 횡단 관심(Crossing Concerns)라고 한다. 이에 반해 요청에 따라 실제로 수행되는 핵심 비즈니스 로직을 핵심 관심 (Core Concerns)이라고 한다. 

AOP는 핵심관심에 해당하는 비즈니스 매서드는 전혀 건드리지 않은다.
횡단관심에 해당하는 클래스를 소스 상의 연결고리는 전혀 없는 상태에서 컨테이너에 매서드 적용을 알려주기만 하면 된다.
컨테이너에 새롭게 지시/명령을 하려면 xml을 수정할 필요가 있다.

BoardServiceImpl 에 비즈니스가 작성되어 있는데 DAO를 사용해서 코드가 작성되어있다.
loadAdvice에 관한 어떤 코드도 적혀있지 않다.

비즈니스와 공통분리가 분리되어있다. 소스상의 연결고리는 찾아 볼 수 없다.
business-layer.xml 상의 설정만으로도 분리할 수 있다. 
네임스페이스에서 aop 네임스페이스를 추가한다.

1) 조인포인트 : 모든 비즈니스 매서드를 의미한다.

2) 포인트컷 : 특정 필러팅된 비즈니스 매서드를 의미한다. 

3) 어드바이스(Advice) : 횡단 기능을 가진 비즈니스 매서드 
횡단관심 : 공통기능을 구현한 매서드를 의미
횡단관심으로 구현한 매서드가 트렌젝션으로 구현한 메서드이다.

before, after, after-returning, after-throwing, around
트렌젝션을 관리하는 어드바이스(매서드)는 before가 아닌 After로 등록을 해야 한다.
로그를 출력하는 어드바이스(매서드)는 앞(before)에서 등록 할 수 도 있다. ex) 호출되는 시간 기록


business-layer 에서 aop에 적힌 method를 어드바이스라고 한다. 
어드바이스 동작 시점을 aop:before , aop:after , aop:after-returning, aop:after-throwing, aop:around 가 있는거다.

위빙은 짜집기를 의미한다. : 시실과 날실을 엮어주는 역할
4) 위빙은 핵심기능과 횡단기능을 엮는 역할을 한다. Aspect를 통해서 위빙이 동작 할 수 있다.
위빙은 aop의 핵심기능인데 위빙이 가능하게 하려면 Aspect 애스팩트가 필요하다.


5) Aspect는 포인트컷과 어드바이스의 결합이다.
* Aspect 와 Advisor 은 같다. (같이 사용 할 수 있다.)

어드바이스는 트렌젝션 설정할때 필요하다.


**비즈니스 메소드 기점으로 aop aspect의 설정이 달라진다.
After-Returning : 비즈니스 메소드가 성공적으로 리턴되면 동작
After : 비즈니스 메소드가 실행된 후 , 무조건 실행 try-catch-finally 블록에서 해당
After 에서는 returning 속성 값이 없지만 After-Returning은 returning="리턴값" 을 받을 수 있다. 

[사전 처리] 비즈니스 로직 수행 전 동작
[사전 처리] 비즈니스 로직 수행 전 동작
==> JDBC로 getUser() 기능처리
[사후 처리] 비즈니스 로직 수행 후 동작
[사후 처리] 비즈니스 메소드 리턴 값 : UserVO [id=aaa, password=aaa, name=게스트, role=USER]
게스트님 환영합니다. ^^
INFO : org.springframework.context.support.GenericXmlApplicationContext - Closing org.springframework.context.support.GenericXmlApplicationContext@38364841: startup date [Thu Apr 27 18:32:22 KST 2023]; root of context hierarchy
INFO : org.springframework.beans.factory.support.DefaultListableBeanFactory - Destroying singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@54a7079e: defining beans [boardDAO,boardService,userDAO,userService,org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,log,afterReturning,org.springframework.aop.config.internalAutoProxyCreator,allPointcut,getPointcut,org.springframework.aop.aspectj.AspectJPointcutAdvisor#0,org.springframework.aop.aspectj.AspectJPointcutAdvisor#1,org.springframework.context.annotation.ConfigurationClassPostProcessor$ImportAwareBeanPostProcessor#0]; root of factory hierarchy


----------------------------------------------------------------


