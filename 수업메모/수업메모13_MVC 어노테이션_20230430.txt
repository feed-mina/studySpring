
@service 는 serviceImpl, @repository는 DAO, @controller는 컨트롤러 , @AutoWired 는 의존성 주입, AOP 는 xml 방식과 어노테이션 방식을 모두 사용할 수 있다. 
MVC 또한 xml 방식과 어노테이션 방식 둘다 가능하다.

IoC , AOP , MVC 모두 어노테이션으로 설정할 수 있다. 

presentation-layer.xml 에는
컨트롤러 Bean 등록과 HandlerMapping Bean 등록은 주석으로 막느다.
그럼 ViewResolver 설정만 남는다. 

MVC 설정을 Annotation 기반으로 처리한다.

POJO : palin Old Java Object 평범한 옛날 자바 객체
스프링은 어플리케이션에서 운영하는 객체를 POJO 형태로 개발한다
단순하게 POJO는 규칙이 별로 없는 클래스라고 봐도 무관하다. 

스프링은 어플리케이션에서 운영하는 클래스를 POJO 형태로 할 수 있다.
엄격한 규칙이 있고, 그 규칙을 지키지 않으면 실행되지 않기 때문에 POJO형태가 아니다.


	//HandlerReoslver로 맵핑한 것을 RequestMapping으로 대신한다. insertBoard.do요청을 (특정 url요청)  글 등록 매서드와 매칭한다. 는 의미이다. 
	@RequestMapping("/insertBoard.do")
// public class InsertBoardController implements Controller {	 
//	@Override implement를 지우면 오버라이딩 강제성을 안해도 된다. 그렇다면 메소드와 매개변수 , return type을 내가 마음대로할 수 있다.
	
	public void 글등록처리(HttpServletRequest request) {

==============

컨트롤러 매서드에서는 추가할 필요가 없다. vo객체에 setter injection을 사용해서 데이터를 사용 
파라미터이름과 vo클래스의 멤벼변수가 똑같아야할까? 달라도 괜찮다.
VO 와 DAO 에 모두 setter 매서드가 있다면 dao 도 set매서드를 호출할 수 있다.


1. POJO 형태로 바꾸기 위해 우선 implements Controller 를 삭제한다. 
그리고 나서 패키지 위에 @Controller 어노테이션을 적는다. 

2. @Override 어노테이션에서 	@RequestMapping("/getBoardList.do")로 바뀐다.


==================
상세화면과 글목록 화면을 보려면 글 목록을 검색을 하고 나서 session 객체를 얻고 session에 setAttribute라는 속성으로 저장을 한 다음 viewResolver에 바뀌는 화면을 보인다.

하지만 검색결과를 session에 저장하면 안된다. session은 브라우저 하나당 session이 하나씩 저장되기 때문에 session이 커지면 서버 메모리 입장에서는 부담이 커지게 된다. 

이럴때는 request 에 저장을 해야된다. 

Server client-Browser
브라우저에서 링크,버튼 등을 눌러 서버 쪽에 요청을 했을때 (http)요청 프로토콜이 만들어져서 
이 프로토콜이 서버쪽으로 움직인다. 요청 프로토몰이 httpservlet request 타입에 객체를 만들고 request에 사용자가 입력한 정보를 전달한다. 이 정보를 서블릿 객체에 넘긴다. 스프링MVC 구조에서 프론트 컨트롤러가dispatch servlet이고 모든 .do 요청을 디스패치 서블릿을 받는데 디스패치서플릿 동작하기 바로 직전에 reuest가 요청되고 request를 통해 사용자 정보를 추출할 수 있다. request는 브라우저에 서버에 요청할때 생성,전송된다. 응답이 서버가 브라우저에 응답을 할때 request는 삭제 된다. (일회성)이 된다. 

session은 클라이언트(브라우저)가 의지를 가지고 이 브라우저에 매핑되는 세션객처를 브라우저를 종료시키거나 일정 기간 상호작용이 없어서 session이 타임아웃 되거나 로그아웃 버튼을 눌러서 색체에 요청하기 전까지는 session은 계속 남아있는다.

request는 응답이 오면 바로 사라지기 때문에 메모리 입장에서 부담이 되지 않는다.
일회성으로 사용하고 사라지는 기능이라면 session이 아니라 reqeust를 사용해야 한다.

ModelAndView 정보를 저장할때 ModelAndView매서드를 사용한다.
select결과가 model이고 setviewName으로 지정한 이 view화면에서 모델에 해당하는 검색결과를 사용할 수 있다. 여기서 중요한 점은 session이 아닌 request 라는것이다.

ModelAndView객체는 session이 아닌 request를 자동으로 등록을 해준다.
<!-- 
		<%
		List<BoardVO> list = (List) session.getAttribute("boardList");
		%>	
	 -->
	 
	 
	 =====>
	 
	 <%
		List<BoardVO> list = (List) request.getAttribute("boardList");
		%>	
		<%= list.size() %>

	 
		//session.setAttribute("boardList", boardDAO.getBoardList(vo));
		// ModelAndView 객체에 검색 결과와 View 이름을 저장한다. ModelAndView에 저장된 검색 결과는 자동으로 request에 등록된다.
		mav.addObject("boardList", boardDAO.getBoardList(vo));
		mav.setViewName("getBoardList");
	 
	 
	 index페이지를 로그인 이동, 글 목록 바로가기, 검색결과를 JSON으로 받기 이렇게 나뉘었다.
	 로그인 화면으로 이동하려고 login.do로 이동하려면 로그인 실패 로 된다. 로그인 화면으로만 이동하게끔 매소드 하나를 추가한다.
	 
	 이때 메소드 이름은 같게 해도 무관할꺼같다. (매개변수만 다르게) -- 오버로딩
	 
	 웹에서 하이퍼링크를 누르거나 이미지를 누르거나 url을 요청하는 방식은 get방식이다. 웹에서 post방식으로 하는 방법은 매서드 = form태그 로 한다.
	 
	 로그인 화면이나 글 등록 화면처럼 
	 특정 컨트롤러를 이용하지 않는 이상은 get방식으로 사용한다. 
	 똑같은 .do url이지만 get방식이나 post방식이냐 따라서 다른 매소드로 요청할 수 있다. 
	 
	 get방식으로 화면 로그인 화면으로 이동 
	 아이디,패스워드를 입력하고 로그인 버튼을 누르면 인증처리가 되는것을 알 수 있다. 
	 
	로그인 화면으로 넘어갈때 UserVO를 받으면 매개변수로 받은 vo객체에 값을 세팅하면 
	이 객체에 세팅된 값을 이동한 화면에서 이용할 수 있다.
	 
	 jsp파일 위치가 WEB_INF 밑으로 넘어가서 a href의 링크를 .jsp 에서 .do 로 바꾼다. 
	 
	 jsp에서 객체 이름을 사용하려면 소문자를 첫글자로 사용해야 한다. 객체 이름이 너무 길거나 jsp에서 따로 이름을 쓰고 싶다면 @ModelAttribute("이름") 을 사용해서 jsp에서 정한 이름을 사용 할 수 있다.
	 
	 컨트롤러를 POJO로 사용하게 되면 매서드 이름과 매개변수와 리턴타입을 내 마음대로 사용 할 수 있다. 
	 Controller의 리턴타입은 
	 따라서 ModelAndView , String 둘다 가능하다.
	 
	 유지보수의 일관성을 생각하면 Controller의 리턴타입을 통일할 필요가 있다. --> String으로 리턴타입을 사용하는 편이 좋다.
	 
	 ModelAndView 대신 Model을 사용한다.
	 Model은 ModelAndView와 기능적으로 session이 아니라 request를 사용한다는 점이 동일하다.
	 ModelAndView는 Model 과 View로 Pair 쌍으로 사용하는 편이나 Model은 단일로 사용 할 수 있다.
	 
	 ModelAndView.addObject 를 	 model.addAttribute 로 바꿔야 한다. 
	 
	파라미터 값을 자동으로 세팅해주지 않는다.
	@RequestParam을 통해 jsp의 변수를 매개변수의 변수와 짝을 맞춰서 받을 수 있다 
	
	public String deleteBoard(int seq, BoardDAO boardDAO) {
		System.out.println("글삭제처리 " +seq+"번 게시글 삭제");	
		// boardDAO.deleteBoard(vo);
		return "forward:getBoardList.do"; 
	
	
	@RequestMapping("/deleteBoard.do")
	public String deleteBoard(@RequestParam("seq") int boardseq, BoardDAO boardDAO) {
		System.out.println("글삭제처리 " + boardseq+"번 게시글 삭제");	
		// boardDAO.deleteBoard(vo);
		return "forward:getBoardList.do"; 
	 

@RequestParam 을 쓸때 3가지 의 속성을 쓸 수 있다. 
value, defaultValue, required 

defaultValue은 value값의 파라미터가 전달이 안되면 defaultValue로 전달, required는 파라미터를 생략할 수 있는지 알아볼 수 있다. 	 
	 
=====
sessionAttribute 

어떤 경우에는 타이틀만, 어떤 경우에는 작성자만, 어떤경우에는 콘텐츠만, 아니면 모두 수정할 수도 있다 
		private final String BOARD_UPDATE = "update board set title=?, content=? where seq=?";

향후에 업데이트로 할 가능성의 컬럼들을 업데이트 하는 방식의 sql을 보통 이렇게 사용한다.
	 
session어노테이션을 사용하면 null로 업데이트 되지 않고 값을 유지할 수 있다.
//board라는 이름으로 어떤 정보가 저장이 되면 session에도 그대로 저장할 수 있다. 









	 
	 