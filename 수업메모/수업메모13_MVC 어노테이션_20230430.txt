
@service 는 serviceImpl, @repository는 DAO, @controller는 컨트롤러 , @AutoWired 는 의존성 주입, AOP 는 xml 방식과 어노테이션 방식을 모두 사용할 수 있다. 
MVC 또한 xml 방식과 어노테이션 방식 둘다 가능하다.

IoC , AOP , MVC 모두 어노테이션으로 설정할 수 있다. 

presentation-layer.xml 에는
컨트롤러 Bean 등록과 HandlerMapping Bean 등록은 주석으로 막느다.
그럼 ViewResolver 설정만 남는다. 

MVC 설정을 Annotation 기반으로 처리한다.

POJO : palin Old Java Object 평범한 옛날 자바 객체
스프링은 어플리케이션에서 운영하는 객체를 POJO 형태로 개발한다
단순하게 POJO는 규칙이 별로 없는 클래스라고 봐도 무관하다. 

스프링은 어플리케이션에서 운영하는 클래스를 POJO 형태로 할 수 있다.
엄격한 규칙이 있고, 그 규칙을 지키지 않으면 실행되지 않기 때문에 POJO형태가 아니다.


	//HandlerReoslver로 맵핑한 것을 RequestMapping으로 대신한다. insertBoard.do요청을 (특정 url요청)  글 등록 매서드와 매칭한다. 는 의미이다. 
	@RequestMapping("/insertBoard.do")
// public class InsertBoardController implements Controller {	 
//	@Override implement를 지우면 오버라이딩 강제성을 안해도 된다. 그렇다면 메소드와 매개변수 , return type을 내가 마음대로할 수 있다.
	
	public void 글등록처리(HttpServletRequest request) {

==============

컨트롤러 매서드에서는 추가할 필요가 없다. vo객체에 setter injection을 사용해서 데이터를 사용 
파라미터이름과 vo클래스의 멤벼변수가 똑같아야할까? 달라도 괜찮다.
VO 와 DAO 에 모두 setter 매서드가 있다면 dao 도 set매서드를 호출할 수 있다.


1. POJO 형태로 바꾸기 위해 우선 implements Controller 를 삭제한다. 
그리고 나서 패키지 위에 @Controller 어노테이션을 적는다. 

2. @Override 어노테이션에서 	@RequestMapping("/getBoardList.do")로 바뀐다.





