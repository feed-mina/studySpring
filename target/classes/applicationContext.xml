<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

<!-- 스프링 컨테이너가 생성할 객체 등록 -->
	<!-- <bean id="Ltv" class="com.min.biz.tv.LGTV" lazy-init="true"></bean> -->
	<!-- lazy-init:false가 default가 된다. -->
	
	<!--<bean id="tv" 
		class="com.min.biz.tv.SamsungTV" 
		init-method="맴버변수초기화" 
		destroy-method="자원해제" 
		scope="prototype"></bean>
	
		<bean id="tv" class="com.min.biz.tv.GoogleTV">
			<property name="speaker" ref="speaker"/>
			<property name="price" value="1200000"/>
		</bean>
		
	-->
		
	<!-- 
		<bean id="speaker" class="com.min.biz.tv.SonySpeaker"></bean>
		
		<bean id="tv" class="com.min.biz.tv.GoogleTV" p:speaker-ref="speaker" p:price="10000000"/>
		
		<bean id="collection" class="com.min.biz.tv.CollectionBean">
			<property name="addressList">
				
				<props>
					<prop key="둘리">쌍문동</prop>
					<prop key="또치">면목동</prop>
				</props>
			</property>
		</bean>
	 -->	
	<!-- Annotation 기반의 IoC 설정 -->	
		<context:component-scan base-package="com.min.biz"/>
		
	<!-- 유지보수 과정에서 변경되는 객체를 하나만 생성하기 위한 bean 등록 , 유지보수 과정에서 바뀌지 않는 객체는 component가 좋다.-->	
		<bean class="com.min.biz.tv.SonySpeaker"/>
		
</beans>


<!-- 기존의 bean 설정을 주석으로 막고 context 네임스페이스를 사용해서 설정을 다시 만들었다. component-scan 태그는 component 어노테이션을 찾고(scan) 메모리에 띄우는 기능을 한다. 
base-package 속성은 base-package 의 값으로 시작하는 모든 클래스에서 컴포넌트 어노테이션을 찾게 한다. -->
<!-- <bean id="tv" class="com.min.biz.tv.SamsungTV">
			<constructor-arg ref="speaker"/> 
			<constructor-arg value="1500000"/>
		</bean>
		 -->
		

<!-- namespaces는 xml설정파일에 사용할 수 있는 태그나 속성을 규정하는 것, Namespaces에서 규정하는 이름을 사용한다. 컨테이너에 전혀 다른 작업을 시킬수 있다. -->

<!-- 생성자 인젝션과 setter 인젝션은 결과는 똑같을 수 밖에 없다. 맴버변수를 초기화하거나 특정값을 지정하는것이기 때문에, 다른점은 생성자 injection인지 또는 setter injection인지 방법의 차이다. -->

		
<!--setter인젝션을 통해 GoogleTv의 setter매서드 지정으로 setter 뒤 매서드 이름을 적는다. speaker타입의 객체가 매개변수로 넘겨아 하는다. argument를 ref속성으로 넘긴다.  -->
<!-- set스피커 매서드가 GoogleTV 매서드 생성된 직후에 set매서드로 setspeaker를 생성하고 인자로 id가 speaker인 SonySpeaker를 찾아서 넘긴다. -->



<!-- 정수나 실수나 고정된 값을 전달할때는 constructor argument (생성자 argument)로 value 속성을 사용한다. -->
<!-- xml파일을 통해 컨테이너 동작을 바꿀수 있다 ! tv 생성자가 만들때 생성자 argument로 id가 speaker인 생성자를 넘겨줘라 -->


<!-- scope은 singleton 이 default가 된다. 메모리에 하나의 객체만 유지할 수 있다.-->
<!-- scope이 prototype이라면 getbean을 할때마다 생성자가 매번생기고 ,맴버변수초기화도 매번 하게되고 주소도 전부 다르게 된다. 
또한 lazy-init설정과 상관없이 Lazy Loading으로 구동방식을 바꾼다.-->
<!-- SamsungTV는 FreeLoading이 된다.(원래 스프링컨테이너 방식) -->	

<!-- <bean class="com.min.biz.tv.SamsungTV"></bean> -->

<!-- 스프링컨테이너가 객체들을 메모리에 띄어주는 시점은 Free로딩이기 때문에 컨테이너가 생성될때 객체들이 bean태그 순서대로 띄어진다.-->
<!-- id 속성은 생략할 수 있으나 클래스 안에서 com.min.biz.tv.SamsungTV#0 처럼 #0를 붙어서 getBean을 해야 한다. id가 com.min.biz.tv.SamsungTV#0가 된다. --> 
<!-- id의 역할은 id를 지정해 메모리에 떠있는 객체들을 unique하게 식별할 수 있다. -->
<!-- 객체가 생성될때 default 생성자만 인지한다. 매개변수가 있는 생성자는 인지 할 수 없다. -->
<!-- id와 name의 차이점 : id는 숫자로 시작할수없고 공백을 포함할수없고 특수기호 사용할 수 없다. 자바변수이름규칙을 따라야한다. 하지만 name은 예외를 허용한다. -->

<!-- init-method 속성으로 맴버변수 초기화 설정을 등록할 수 있다. -->


